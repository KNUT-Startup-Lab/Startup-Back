name: Deploy to EC2

# main 브랜치에 push 이벤트가 발생했을 때 이 워크플로우를 실행합니다.
on:
  push:
    branches: [ main ]

jobs:
  # 'build'라는 이름의 job을 정의합니다.
  build:
    runs-on: ubuntu-latest # 이 job은 ubuntu 최신 버전 환경에서 실행됩니다.
    steps:
    - name: Checkout code # 코드를 체크아웃합니다.
      uses: actions/checkout@v4

    - name: Set up JDK 21 # Java 21 버전을 설치합니다.
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew # gradlew 파일에 실행 권한을 부여합니다.
      run: chmod +x ./gradlew

    - name: Build with Gradle # Gradle로 프로젝트를 빌드합니다. (테스트는 제외하여 속도 향상)
      run: ./gradlew build -x test

    - name: Upload artifact # 빌드 결과물(JAR 파일)을 artifact로 업로드하여 deploy job에서 사용합니다.
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: build/libs/*.jar

  # 'deploy'라는 이름의 job을 정의합니다. build job이 성공해야 실행됩니다.
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact # build job에서 업로드한 artifact를 다운로드합니다.
      uses: actions/download-artifact@v4
      with:
        name: app-jar

    - name: SCP to EC2 # 다운로드한 JAR 파일을 EC2 서버로 복사합니다.
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "*.jar"
        target: "/home/ubuntu"

    - name: SSH and Deploy # EC2에 SSH로 접속하여 배포 스크립트를 실행합니다.
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          cd /home/ubuntu
          # 'plain'이 아닌 실행가능한 jar 파일명을 찾습니다.
          export JAR_NAME=$(ls *.jar | grep -v 'plain' | head -n 1)
          echo "Deploying $JAR_NAME"
          # 8080 포트를 사용하고 있는 기존 프로세스를 종료합니다.
          sudo fuser -k 8080/tcp || true
          # 공백이 포함된 파일명을 올바르게 처리하기 위해 변수명에 큰따옴표를 사용합니다.
          nohup java -jar "$JAR_NAME" > app.log 2>&1 &
